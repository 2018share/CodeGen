package {{packagePath}}.service;

import com.google.common.collect.Maps;
import io.terminus.common.model.Paging;
import {{packagePath}}.dao.{{className}}Dao;
import {{packagePath}}.model.{{className}};
import {{packagePath}}.service.{{className}}ReadService;
import {{packagePath}}.service.{{className}}WriteService;
import io.terminus.parana.common.utils.RespHelper;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

/**
 * Code generated by terminus code gen
 * Desc: {{comment}}Service测试类
 * Date: {{now}}
 */
public class {{className}}ServiceTest extends BaseServiceTest {

    @Autowired
    private {{className}}ReadService {{classLowerFirst}}ReadService;

    @Autowired
    private {{className}}WriteService {{classLowerFirst}}WriteService;

    @Autowired
    private {{className}}Dao {{classLowerFirst}}Dao;

    private {{className}} {{paramName}};

    @Before
    public void setUp() {
        {{paramName}} = make();
        {{classLowerFirst}}Dao.create({{paramName}});
        assertNotNull({{paramName}}.getId());
    }

    @Test
    public void testFind{{paramUpperFirst}}ById() {
        {{className}} excepted{{paramUpperFirst}} = RespHelper.orServEx({{classLowerFirst}}ReadService.find{{paramUpperFirst}}ById({{paramName}}.getId()));
        assertNotNull(excepted{{paramUpperFirst}});
    }

    @Test
    public void testFindAll{{paramUpperFirst}}s() {
        List<{{className}}> excepted{{paramUpperFirst}}s = RespHelper.orServEx({{classLowerFirst}}ReadService.findAll{{paramUpperFirst}}s());
        assertNotNull(excepted{{paramUpperFirst}}s);
        assertFalse(excepted{{paramUpperFirst}}s.isEmpty());
    }

    @Test
    public void testPaging{{paramUpperFirst}}() {
        Map<String, Object> map = Maps.newHashMap();
        Paging<{{className}}> {{paramName}}Paging = RespHelper.orServEx({{classLowerFirst}}ReadService.paging{{paramUpperFirst}}(map, 0, 20));
        assertTrue({{paramName}}Paging.getTotal() > 0 && {{paramName}}Paging.getTotal() <= 20);
        assertTrue(!{{paramName}}Paging.getData().isEmpty());
    }

    @Test
    public void testCreate{{paramUpperFirst}}() {
        {{className}} expected{{paramUpperFirst}} = make();
        Long excepted{{paramUpperFirst}}Id = RespHelper.orServEx({{classLowerFirst}}WriteService.create{{paramUpperFirst}}(expected{{paramUpperFirst}}));
        assertNotNull(excepted{{paramUpperFirst}}Id);
        assertNotNull({{classLowerFirst}}Dao.findById(excepted{{paramUpperFirst}}Id));
    }

    @Test
    public void testUpdate{{paramUpperFirst}}() {
        {{className}} expected{{paramUpperFirst}} = new {{className}}();
        expected{{paramUpperFirst}}.setId({{paramName}}.getId());

        {{#each fields}}{{#of property "createdAt,updatedAt"}}{{else}}expected{{paramUpperFirst}}.set{{propertyUpperFirst}}({{#equal type "Integer"}}2{{/equal}}{{#equal type "Long"}}2L{{/equal}}{{#equal type "Double"}}2D{{/equal}}{{#equal type "Date"}}new DateTime(2016, 1, 1, 1, 1).toDate(){{/equal}}{{#equal type "Boolean"}}true{{/equal}}{{#equal type "String"}}"{{propertyUpperFirst}}"{{/equal}});{{/of}}
        {{/each}}RespHelper.orServEx({{classLowerFirst}}WriteService.update{{paramUpperFirst}}(expected{{paramUpperFirst}}));
        {{className}} actual{{paramUpperFirst}} = {{classLowerFirst}}Dao.findById({{paramName}}.getId());

        {{#each fields}}{{#of property "createdAt,updatedAt"}}{{else}}assertEquals(actual{{paramUpperFirst}}.get{{propertyUpperFirst}}(), expected{{paramUpperFirst}}.get{{propertyUpperFirst}}());{{/of}}
        {{/each}}
    }

    @Test
    public void testDelete{{paramUpperFirst}}() {
        {{className}} expected{{paramUpperFirst}} = make();
        {{classLowerFirst}}Dao.create(expected{{paramUpperFirst}});
        assertNotNull({{classLowerFirst}}Dao.findById(expected{{paramUpperFirst}}.getId()));

        RespHelper.orServEx({{classLowerFirst}}WriteService.delete{{paramUpperFirst}}ById(expected{{paramUpperFirst}}.getId()));
        assertNull({{classLowerFirst}}Dao.findById(expected{{paramUpperFirst}}.getId()));
    }

    private {{className}} make() {
        {{className}} {{paramName}} = new {{className}}();
        {{#each fields}}{{#of property "createdAt,updatedAt"}}{{else}}{{paramName}}.set{{propertyUpperFirst}}({{#equal type "Integer"}}1{{/equal}}{{#equal type "Long"}}1L{{/equal}}{{#equal type "Double"}}1D{{/equal}}{{#equal type "Date"}}new Date(){{/equal}}{{#equal type "Boolean"}}true{{/equal}}{{#equal type "String"}}"{{property}}"{{/equal}});{{/of}}
        {{/each}}return {{paramName}};
    }
}
