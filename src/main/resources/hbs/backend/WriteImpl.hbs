package {{packagePath}}.service;

import com.google.common.base.Throwables;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import {{packagePath}}.dao.{{className}}Dao;
import {{packagePath}}.model.{{className}};
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Code generated by CodeGen
 * Desc: {{comment}}写服务实现类
 * Date: {{now}}
 */
@Slf4j
@Service
@RpcProvider
public class {{className}}WriteServiceImpl implements {{className}}WriteService {

    private final {{className}}Dao {{classLowerFirst}}Dao;

    @Autowired
    public {{className}}WriteServiceImpl({{className}}Dao {{classLowerFirst}}Dao) {
        this.{{classLowerFirst}}Dao = {{classLowerFirst}}Dao;
    }

    @Override
    public Response<Long> create{{paramUpperFirst}}({{className}} {{paramName}}) {
        try {
            {{classLowerFirst}}Dao.create({{paramName}});
            return Response.ok({{paramName}}.getId());
        } catch (Exception e) {
            log.error("create {{paramName}} failed, {{paramName}}:{}, cause:{}", {{paramName}}, Throwables.getStackTraceAsString(e));
            return Response.fail("{{paramName}}.create.fail");
        }
    }

    @Override
    public Response<Boolean> update{{paramUpperFirst}}({{className}} {{paramName}}) {
        try {
            return Response.ok({{classLowerFirst}}Dao.update({{paramName}}));
        } catch (Exception e) {
            log.error("update {{paramName}} failed, {{paramName}}:{}, cause:{}", {{paramName}}, Throwables.getStackTraceAsString(e));
            return Response.fail("{{paramName}}.update.fail");
        }
    }

    @Override
    public Response<Boolean> delete{{paramUpperFirst}}ById(Long {{paramName}}Id) {
        try {
            return Response.ok({{classLowerFirst}}Dao.delete({{paramName}}Id));
        } catch (Exception e) {
            log.error("delete {{paramName}} failed, {{paramName}}Id:{}, cause:{}", {{paramName}}Id, Throwables.getStackTraceAsString(e));
            return Response.fail("{{paramName}}.delete.fail");
        }
    }
}
