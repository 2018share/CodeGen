package {{packagePath}}.front;

import com.google.common.collect.ImmutableMap;
import io.terminus.common.model.Paging;
import {{packagePath}}.model.{{className}};
import org.junit.Before;
import org.junit.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

/**
 * Code generated by CodeGen
 * Desc: {{comment}}Controller测试类
 * Date: {{now}}
 */
public class {{className}}Test extends BaseWebTest {

    private {{className}} {{paramName}};

    @Before
    public void setUp() {
        String url = "/api/{{paramName}}/id";
        {{paramName}} = make{{paramUpperFirst}}();

        ResponseEntity<Long> createResult = postForEntity(url, {{paramName}}, Long.class);
        assertEquals(createResult.getStatusCode(), HttpStatus.OK);
        {{paramName}}.setId(createResult.getBody());
    }

    @Test
    public void testFind{{paramUpperFirst}}ById() {
        {{className}} excepted{{paramUpperFirst}} = find{{paramUpperFirst}}ById({{paramName}}.getId());
        assertNotNull(excepted{{paramUpperFirst}});
    }

    @Test
    public void testCreateOrUpdate{{paramUpperFirst}}() {
        String url = "/api/{{paramName}}";

        //创建
        ResponseEntity<Long> createResult = postForEntity(url, make{{paramUpperFirst}}(), Long.class);
        assertEquals(createResult.getStatusCode(), HttpStatus.OK);

        {{className}} create{{paramUpperFirst}} = find{{paramUpperFirst}}ById(createResult.getBody());
        assertNotNull(create{{paramUpperFirst}});

        //更新
        {{#each fields}}{{#of property "createdAt,updatedAt"}}{{else}}create{{paramUpperFirst}}.set{{propertyUpperFirst}}({{#equal type "Integer"}}2{{/equal}}{{#equal type "Long"}}2L{{/equal}}{{#equal type "Double"}}2D{{/equal}}{{#equal type "Date"}}new DateTime(2016, 1, 1, 1, 1).toDate(){{/equal}}{{#equal type "Boolean"}}true{{/equal}}{{#equal type "String"}}"{{propertyUpperFirst}}"{{/equal}});{{/of}}
        {{/each}}ResponseEntity<Long> updateResult = postForEntity(url, create{{paramUpperFirst}}, Long.class);
        assertEquals(updateResult.getStatusCode(), HttpStatus.OK);

        {{className}} update{{paramUpperFirst}} = find{{paramUpperFirst}}ById(create{{paramUpperFirst}}.getId());
        {{#each fields}}{{#of property "createdAt,updatedAt"}}{{else}}assertEquals(update{{paramUpperFirst}}.get{{propertyUpperFirst}}(), create{{paramUpperFirst}}.get{{propertyUpperFirst}}());{{/of}}
        {{/each}}
    }

    @Test
    public void testDelete{{paramUpperFirst}}ById() {
        String url = "/api/{{paramName}}/delete";
        postFormForEntity(url, ImmutableMap.of("{{paramName}}Id", {{paramName}}.getId(), Boolean.class);

        {{className}} delete{{paramUpperFirst}} = find{{paramUpperFirst}}ById({{paramName}}.getId());
        assertNull(delete{{paramUpperFirst}});
    }

    @Test
    public void testPaging{{paramUpperFirst}}() {
        String url = "/api/{{paramName}}/paging";
        ResponseEntity<Paging> result = getForEntity(url, ImmutableMap.of("pageNo", 1, "size", 20), Paging.class);
        assertEquals(result.getStatusCode(), HttpStatus.OK);
        assertTrue(result.getBody().getTotal() > 0);
    }

    private {{className}} find{{paramUpperFirst}}ById(Long {{paramName}}Id) {
        String url = "/api/{{paramName}}/id";
        ResponseEntity<{{className}}> result = getForEntity(url, ImmutableMap.of("{{paramName}}Id", {{paramName}}Id), {{className}}.class);
        assertEquals(result.getStatusCode(), HttpStatus.OK);
        return result.getBody();
    }

    private {{className}} make{{paramUpperFirst}}() {
        {{className}} {{paramName}} = new {{className}}();
        {{#each fields}}{{#of property "createdAt,updatedAt"}}{{else}}{{paramName}}.set{{propertyUpperFirst}}({{#equal type "Integer"}}1{{/equal}}{{#equal type "Long"}}1L{{/equal}}{{#equal type "Double"}}1D{{/equal}}{{#equal type "Date"}}new Date(){{/equal}}{{#equal type "Boolean"}}true{{/equal}}{{#equal type "String"}}"{{property}}"{{/equal}});{{/of}}
        {{/each}}return {{paramName}};
    }
}
