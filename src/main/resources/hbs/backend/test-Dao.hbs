package {{packagePath}}.dao;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import io.terminus.common.model.Paging;
import {{packagePath}}.model.{{className}};
import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Date;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

/**
 * Code generated by terminus code gen
 * Desc: {{comment}}Dao测试类
 * Date: {{now}}
 */
public class {{className}}DaoTest extends BaseDaoTest {

    @Autowired
    private {{className}}Dao {{classLowerFirst}}Dao;

    private {{className}} {{paramName}};

    @Before
    public void setUp() {
        {{paramName}} = make();
        {{classLowerFirst}}Dao.create({{paramName}});
        assertNotNull({{paramName}}.getId());
    }

    @Test
    public void testCreates() {
        int before{{paramUpperFirst}} = {{classLowerFirst}}Dao.listAll().size();
        {{classLowerFirst}}Dao.creates(Lists.newArrayList(make(), make(), make()));
        int after{{paramUpperFirst}} = {{classLowerFirst}}Dao.listAll().size();
        assertEquals(after{{paramUpperFirst}} - before{{paramUpperFirst}}, 3);
    }

    @Test
    public void testFindById() {
        {{className}} expected{{paramUpperFirst}} = {{classLowerFirst}}Dao.findById({{paramName}}.getId());
        assertNotNull(expected{{paramUpperFirst}});
    }

    @Test
    public void testUpdate() {
        {{className}} expected{{paramUpperFirst}} = new {{className}}();
        expected{{paramUpperFirst}}.setId({{paramName}}.getId());

        {{#each fields}}{{#of property "createdAt,updatedAt"}}{{else}}expected{{paramUpperFirst}}.set{{propertyUpperFirst}}({{#equal type "Integer"}}2{{/equal}}{{#equal type "Long"}}2L{{/equal}}{{#equal type "Double"}}2D{{/equal}}{{#equal type "Date"}}new DateTime(2016, 1, 1, 1, 1).toDate(){{/equal}}{{#equal type "Boolean"}}true{{/equal}}{{#equal type "String"}}"{{propertyUpperFirst}}"{{/equal}});{{/of}}
        {{/each}}{{classLowerFirst}}Dao.update(expected{{paramUpperFirst}});
        {{className}} actual{{paramUpperFirst}} = {{classLowerFirst}}Dao.findById({{paramName}}.getId());

        {{#each fields}}{{#of property "createdAt,updatedAt"}}{{else}}assertEquals(actual{{paramUpperFirst}}.get{{propertyUpperFirst}}(), expected{{paramUpperFirst}}.get{{propertyUpperFirst}}());{{/of}}
        {{/each}}
    }

    @Test
    public void testDelete() {
        {{classLowerFirst}}Dao.delete({{paramName}}.getId());
        {{className}} expected{{paramUpperFirst}} = {{classLowerFirst}}Dao.findById({{paramName}}.getId());
        assertNull(expected{{paramUpperFirst}});
    }

    @Test
    public void testListAll() {
        List<{{className}}> {{paramName}}List = {{classLowerFirst}}Dao.listAll();
        assertTrue({{paramName}}List.size() > 0);
    }

    @Test
    public void testPaging() {
        Map<String, Object> map = Maps.newHashMap();
        Paging<{{className}}> {{paramName}}Paging = {{classLowerFirst}}Dao.paging(0, 20, map);
        assertTrue({{paramName}}Paging.getTotal() > 0 && {{paramName}}Paging.getTotal() <= 20);
        assertTrue(!{{paramName}}Paging.getData().isEmpty());
    }

    private {{className}} make() {
        {{className}} {{paramName}} = new {{className}}();
        {{#each fields}}{{#of property "createdAt,updatedAt"}}{{else}}{{paramName}}.set{{propertyUpperFirst}}({{#equal type "Integer"}}1{{/equal}}{{#equal type "Long"}}1L{{/equal}}{{#equal type "Double"}}1D{{/equal}}{{#equal type "Date"}}new Date(){{/equal}}{{#equal type "Boolean"}}true{{/equal}}{{#equal type "String"}}"{{property}}"{{/equal}});{{/of}}
        {{/each}}return {{paramName}};
    }
}
