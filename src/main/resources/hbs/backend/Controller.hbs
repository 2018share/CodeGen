package {{packagePath}};

import io.terminus.boot.rpc.common.annotation.RpcConsumer;
import io.terminus.common.model.Paging;
import io.terminus.common.utils.Params;
import io.terminus.parana.common.utils.RespHelper;
import {{packagePath}}.model.{{className}};
import {{packagePath}}.service.{{className}}ReadService;
import {{packagePath}}.service.{{className}}WriteService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Code generated by CodeGen
 * Desc: {{comment}} Controller
 * Date: {{now}}
 */
@Slf4j
@RestController
@RequestMapping("/api")
public class {{className}}s {

    @RpcConsumer
    private {{className}}ReadService {{classLowerFirst}}ReadService;

    @RpcConsumer
    private {{className}}WriteService {{classLowerFirst}}WriteService;

    /**
     * 根据id查询{{comment}}
     * @param {{paramName}}Id 主键id
     * @return {{comment}}
     */
    @RequestMapping(value = "/{{paramName}}/id", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public {{className}} find{{paramUpperFirst}}ById(@RequestParam("{{paramName}}Id") Long {{paramName}}Id) {
        return RespHelper.or500({{classLowerFirst}}ReadService.find{{paramUpperFirst}}ById({{paramName}}Id));
    }

    /**
     * 创建或更新{{className}}
     * @return 是否成功
     */
    @RequestMapping(value = "/{{paramName}}", method = RequestMethod.POST)
    public Boolean createOrUpdate{{paramUpperFirst}}(@RequestBody {{className}} {{paramName}}) {
        checkNotNull({{paramName}}, "{{paramName}}.not.null");

        if ({{paramName}}.getId() == null) {
            RespHelper.or500({{classLowerFirst}}WriteService.create{{paramUpperFirst}}({{paramName}}));
        } else {
            RespHelper.or500({{classLowerFirst}}WriteService.update{{paramUpperFirst}}({{paramName}}));
        }
        return Boolean.TRUE;
    }

    /**
     * 根据主键id删除{{className}}
     * @return 是否成功
     */
    @RequestMapping(value = "/{{paramName}}", method = RequestMethod.DELETE)
    public Boolean delete{{paramUpperFirst}}(@RequestParam("{{paramName}}Id") Long {{paramName}}Id) {
        return RespHelper.or500({{classLowerFirst}}WriteService.delete{{paramUpperFirst}}ById({{paramName}}Id));
    }

    /**
     * 分页查询{{comment}}
     * @param params    查询参数
     * @param pageNo    当前页码
     * @param size      分页大小
     * @return  {{comment}}分页结果
     */
    @RequestMapping(value = "/{{paramName}}/paging", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public Paging<{{className}}> paging{{paramUpperFirst}}(
            @RequestParam Map<String, Object> params,
            @RequestParam(value = "pageNo", required = false) Integer pageNo,
            @RequestParam(value = "size", required = false) Integer size) {
        params = Params.filterNullOrEmpty(params);
        return RespHelper.or500({{classLowerFirst}}ReadService.paging{{paramUpperFirst}}(params, pageNo, size));
    }
}