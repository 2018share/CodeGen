package io.terminus.tools.jdbccodegen.model;

import com.google.common.base.Throwables;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.PageInfo;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;
import {{packagePath}}.dao.{{className}}Dao;
import {{packagePath}}.model.{{className}};
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

/**
 * Code generated by terminus code gen
 * Desc: {{comment}}读服务实现类
 * Date: {{now}}
 */
@Slf4j
@Service
@RpcProvider
public class {{className}}ReadServiceImpl implements {{className}}ReadService {

    private final {{className}}Dao {{classLowerFirst}}Dao;

    @Autowired
    public {{className}}ReadServiceImpl({{className}}Dao {{classLowerFirst}}Dao) {
        this.{{classLowerFirst}}Dao = {{classLowerFirst}}Dao;
    }

    @Override
    public Response<{{className}}> find{{paramUpperFirst}}ById(Long {{paramName}}Id) {
        try {
            return Response.ok({{classLowerFirst}}Dao.findById({{paramName}}Id));
        } catch (Exception e) {
            log.error("find {{paramName}} by id failed, {{paramName}}Id:{}, cause:{}", {{paramName}}Id, Throwables.getStackTraceAsString(e));
            return Response.fail("{{paramName}}.find.fail");
        }
    }

    @Override
    public Response<List<{{className}}>> findAll{{paramUpperFirst}}s() {
        try {
            return Response.ok({{classLowerFirst}}Dao.listAll());
        } catch (Exception e) {
            log.error("find all {{paramName}} failed, cause:{}", Throwables.getStackTraceAsString(e));
            return Response.fail("{{paramName}}.find.fail");
        }
    }

    @Override
    public Response<Paging<{{className}}>> paging{{paramUpperFirst}}(Map<String, Object> criteria, Integer pageNo, Integer size) {
        try {
            PageInfo page = PageInfo.of(pageNo, size);
            return Response.ok({{classLowerFirst}}Dao.paging(page.getOffset(), page.getLimit(), criteria));
        } catch (Exception e) {
            log.error("paging {{paramName}} failed, criteria:{}, pageNo:{}, size:{}, cause:{}", criteria, pageNo, size, Throwables.getStackTraceAsString(e));
            return Response.fail("{{paramName}}.find.fail");
        }
    }
}
