package io.terminus.doctor.basic.service;

import com.google.common.collect.Maps;
import io.terminus.common.model.Paging;
import io.terminus.doctor.basic.dao.PhoenixCoderDao;
import io.terminus.doctor.basic.model.PhoenixCoder;
import io.terminus.doctor.basic.service.PhoenixCoderReadService;
import io.terminus.doctor.basic.service.PhoenixCoderWriteService;
import io.terminus.parana.common.utils.RespHelper;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

/**
 * Code generated by CodeGen
 * Desc: 程序员表Service测试类
 * Date: 2016-11-23
 */
public class PhoenixCoderServiceTest extends BaseServiceTest {

    @Autowired
    private PhoenixCoderReadService phoenixCoderReadService;

    @Autowired
    private PhoenixCoderWriteService phoenixCoderWriteService;

    @Autowired
    private PhoenixCoderDao phoenixCoderDao;

    private PhoenixCoder coder;

    @Before
    public void setUp() {
        coder = make();
        phoenixCoderDao.create(coder);
        assertNotNull(coder.getId());
    }

    @Test
    public void testFindCoderById() {
        PhoenixCoder exceptedCoder = RespHelper.orServEx(phoenixCoderReadService.findCoderById(coder.getId()));
        assertNotNull(exceptedCoder);
    }

    @Test
    public void testFindAllCoders() {
        List<PhoenixCoder> exceptedCoders = RespHelper.orServEx(phoenixCoderReadService.findAllCoders());
        assertNotNull(exceptedCoders);
        assertFalse(exceptedCoders.isEmpty());
    }

    @Test
    public void testPagingCoder() {
        Map<String, Object> map = Maps.newHashMap();
        Paging<PhoenixCoder> coderPaging = RespHelper.orServEx(phoenixCoderReadService.pagingCoder(map, 0, 20));
        assertTrue(coderPaging.getTotal() > 0 && coderPaging.getTotal() <= 20);
        assertTrue(!coderPaging.getData().isEmpty());
    }

    @Test
    public void testCreateCoder() {
        PhoenixCoder expectedCoder = make();
        Long exceptedCoderId = RespHelper.orServEx(phoenixCoderWriteService.createCoder(expectedCoder));
        assertNotNull(exceptedCoderId);
        assertNotNull(phoenixCoderDao.findById(exceptedCoderId));
    }

    @Test
    public void testUpdateCoder() {
        PhoenixCoder expectedCoder = new PhoenixCoder();
        expectedCoder.setId(coder.getId());

        expectedCoder.setName("Name");
        expectedCoder.setMobile("Mobile");
        expectedCoder.setType(2);
        
        
        RespHelper.orServEx(phoenixCoderWriteService.updateCoder(expectedCoder));
        PhoenixCoder actualCoder = phoenixCoderDao.findById(coder.getId());

        assertEquals(actualCoder.getName(), expectedCoder.getName());
        assertEquals(actualCoder.getMobile(), expectedCoder.getMobile());
        assertEquals(actualCoder.getType(), expectedCoder.getType());
        
        
        
    }

    @Test
    public void testDeleteCoder() {
        PhoenixCoder expectedCoder = make();
        phoenixCoderDao.create(expectedCoder);
        assertNotNull(phoenixCoderDao.findById(expectedCoder.getId()));

        RespHelper.orServEx(phoenixCoderWriteService.deleteCoderById(expectedCoder.getId()));
        assertNull(phoenixCoderDao.findById(expectedCoder.getId()));
    }

    private PhoenixCoder make() {
        PhoenixCoder coder = new PhoenixCoder();
        coder.setName("name");
        coder.setMobile("mobile");
        coder.setType(1);
        
        
        return coder;
    }
}
