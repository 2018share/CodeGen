package io.terminus.doctor.basic;

import io.terminus.boot.rpc.common.annotation.RpcConsumer;
import io.terminus.common.model.Paging;
import io.terminus.common.utils.Params;
import io.terminus.parana.common.utils.RespHelper;
import io.terminus.doctor.basic.model.PhoenixCoder;
import io.terminus.doctor.basic.service.PhoenixCoderReadService;
import io.terminus.doctor.basic.service.PhoenixCoderWriteService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Code generated by CodeGen
 * Desc: 程序员表 Controller
 * Date: 2016-11-23
 */
@Slf4j
@RestController
@RequestMapping("/api")
public class PhoenixCoders {

    @RpcConsumer
    private PhoenixCoderReadService phoenixCoderReadService;

    @RpcConsumer
    private PhoenixCoderWriteService phoenixCoderWriteService;

    /**
     * 根据id查询程序员表
     * @param coderId 主键id
     * @return 程序员表
     */
    @RequestMapping(value = "/coder/id", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public PhoenixCoder findCoderById(@RequestParam("coderId") Long coderId) {
        return RespHelper.or500(phoenixCoderReadService.findCoderById(coderId));
    }

    /**
     * 创建或更新PhoenixCoder
     * @return 是否成功
     */
    @RequestMapping(value = "/coder", method = RequestMethod.POST)
    public Boolean createOrUpdateCoder(@RequestBody PhoenixCoder coder) {
        checkNotNull(coder, "coder.not.null");

        if (coder.getId() == null) {
            RespHelper.or500(phoenixCoderWriteService.createCoder(coder));
        } else {
            RespHelper.or500(phoenixCoderWriteService.updateCoder(coder));
        }
        return Boolean.TRUE;
    }

    /**
     * 根据主键id删除PhoenixCoder
     * @return 是否成功
     */
    @RequestMapping(value = "/coder/delete", method = RequestMethod.POST)
    public Boolean deleteCoder(@RequestParam("coderId") Long coderId) {
        return RespHelper.or500(phoenixCoderWriteService.deleteCoderById(coderId));
    }

    /**
     * 分页查询程序员表
     * @param params    查询参数
     * @param pageNo    当前页码
     * @param size      分页大小
     * @return  程序员表分页结果
     */
    @RequestMapping(value = "/coder/paging", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public Paging<PhoenixCoder> pagingCoder(
            @RequestParam Map<String, Object> params,
            @RequestParam(value = "pageNo", required = false) Integer pageNo,
            @RequestParam(value = "size", required = false) Integer size) {
        params = Params.filterNullOrEmpty(params);
        return RespHelper.or500(phoenixCoderReadService.pagingCoder(params, pageNo, size));
    }
}